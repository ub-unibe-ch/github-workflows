name: Reusable phpunit 

on:
  workflow_call:
    inputs:
      php-version:
        type: string
        required: false
        default: "8.1"
      php-extensions:
        type: string
        required: false
        default: "intl, json, zip"
      database-init:
        type: string
        required: false
        default: "schema"
      database-load-fixtures:
        type: boolean
        required: false
        default: false
      start-services:
        type: boolean
        required: false
        default: true
    secrets:
      packagist-token:
        required: true
      node-token:
        required: false

jobs:
  test:
    name: "phpunit"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@verbose"
        with:
          coverage: "pcov"
          php-version: ${{ inputs.php-version }}
          extensions: ${{ inputs.php-extensions }}
        env:
          COMPOSER_TOKEN: ${{ secrets.packagist-token }}

      - name: "Install symfony-cli"
        run: |
          curl -sS https://get.symfony.com/cli/installer | bash
          mv $HOME/.symfony5/bin/symfony /usr/local/bin/symfony

      - name: Get composer cache directory
        id: composerCache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composerCache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Configure NPM
        run: |
          if [ -n "${{ secrets.node-token}}" ]; then
            echo '//npm.pkg.github.com/:_authToken=${{ secrets.node-token }}' > .npmrc
            echo '@ub-unibe-ch:registry=https://npm.pkg.github.com/' >> .npmrc
            echo 'always-auth=true' >> .npmrc
          fi 

      - name: "Install latest dependencies"
        run: |
          composer install --ansi --no-interaction --no-progress --prefer-dist
          yarn --no-interaction --no-progress
      
      - name: "Build assets"
        run: yarn encore production --color

      - name: "Start services"
        if: ${{ inputs.start-services }}
        run: docker compose up -d --wait
           
      - name: "Create database"
        if: ${{ inputs.database-init != 'none' }}
        run: symfony console doctrine:database:create --if-not-exists --env test --ansi --no-interaction
        
      - name: "Updating schema"
        if: ${{ inputs.database-init == 'schema' }}
        run: symfony console doctrine:schema:update --force --env test --ansi --no-interaction
    
      - name: "Run database migration"
        if: ${{ inputs.database-init == 'migration' }} 
        run: symfony console doctrine:migrations:migrate --env test -n --ansi --no-interaction

      - name: "Load fixtures"
        if: ${{ inputs.database-load-fixtures == true }} 
        run: symfony console doctrine:fixtures:load --force --env test --ansi --no-interaction

      - name: "Run PHPUnit"
        run: symfony php vendor/bin/phpunit --coverage-text=./var/coverage.txt --log-junit ./var/junit.xml 
        continue-on-error: true

      - name: Generate PHPUnit Test Results
        id: test-results
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: "./var/junit.xml"
          check_name: "PHPUnit Test Report"
          fail_on_failure: true
          require_tests: true
          job_summary: false

      - name: Prepare summary
        if: always() 
        run: |
          echo "" > $GITHUB_STEP_SUMMARY

          JOB_SUMMARY="job-summary.md"
          echo "# Job Summary" >> $JOB_SUMMARY
          echo "" >> $JOB_SUMMARY
          if ${{steps.test-results.outcome == 'skipped' || steps.test-results.outcome == 'cancelled' }} ; then
            echo "![](https://img.shields.io/badge/Tests-Unknown-lightgrey)" >> $JOB_SUMMARY
          else 
            STATUS="success"
            TEXT="${{ steps.test-results.outputs.passed}}%20passed"
            if [ "${{ steps.test-results.outputs.skipped }}" -ne "0"]; then
              STATUS="yellow"
              TEXT="$TEXT,%20${{steps.test-results.outputs.skipped}}%20skipped"
            fi
            if [ "${{ steps.test-results.outputs.failed }}" -ne "0" ]; then
              STATUS="critical"
              TEXT="$TEXT,%20${{steps.test-results.outputs.failed}}%20failed"
            fi

            echo "![](https://img.shields.io/badge/tests-$TEXT-$STATUS)" >> $JOB_SUMMARY
          fi

          echo "" >> $JOB_SUMMARY
          echo "## Tests" >> $JOB_SUMMARY
          echo "" >> $JOB_SUMMARY
          echo "State | Number " >> $JOB_SUMMARY
          echo "--- | ---" >> $JOB_SUMMARY
          echo "total | ${{ steps.test-results.outputs.total }}" >> $JOB_SUMMARY
          echo "passed | ${{ steps.test-results.outputs.passed }}" >> $JOB_SUMMARY
          echo "failed | ${{ steps.test-results.outputs.failed }}" >> $JOB_SUMMARY
          echo "skipped | ${{ steps.test-results.outputs.skipped }}" >> $JOB_SUMMARY
          echo "" >> $JOB_SUMMARY
          echo "## CodeCoverage" >> $JOB_SUMMARY
          echo "" >> $JOB_SUMMARY
          sed '5,10!d' ./var/coverage.txt >> $JOB_SUMMARY
          cat $JOB_SUMMARY > $GITHUB_STEP_SUMMARY

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ always() && github.event_name == 'pull_request' }}
        with:
         recreate: true
         path: job-summary.md

      - name: "Cleanup"
        if: ${{ always() && inputs.start-services }}
        run: docker-compose down
